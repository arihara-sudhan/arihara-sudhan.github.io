SOURCE: "pytorch-deep-learning" | GitHub Repository of Daniel Bourke | mrdbourke
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -[13/05/2025]
1. Importing Torch
 import torch
 # For VERSION CHECK
 torch.__version__
2. Scalar
 print(torch.tensor(23))
3. Checking Dimensions
 scalar = torch.tensor(7)
 scalar.ndim #0
4. Number within The Tensor
 scalar.item()
5. 1 Dimensional Tensors
 td = torch.tensor([2,34])
 td.ndim #1
 td.shape #torch.Size([2]) :: It tells how the elements are arranged
6. 2 Dimensional Tensors
 td = torch.tensor([[2,34],[2,34]])
 td.ndim #2
 td.shape #torch.Size([2,2])
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -[14/05/2025]
7. Random Tensor
  randtensor = torch.rand(size=(2,3))
  print(randtensor)
  """
  tensor([[0.1657, 0.7643, 0.0313],
          [0.4440, 0.1008, 0.6982]])
  """
8. Datatype of Tensor
  randtensor.dtype
9. Zeros in Tensor
  torch.zeros(size=(2,3))
  """
  tensor([[0., 0., 0.],
          [0., 0., 0.]])  
  """
10. Ones in Tensor
  torch.ones(size=(2,3))
  """
  tensor([[1., 1., 1.],
          [1., 1., 1.]])  
  """
11. Array Range
  torch.arange(10)
  """
  tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
  """
12. Zeros Like & Ones Like
  tz = torch.zeros(size=(2,3))
  torch.zeros_like(tz)
  """
  tensor([[0., 0., 0.],
          [0., 0., 0.]])
  """
  torch.ones_like(tz)
  """
  tensor([[1., 1., 1.],
         [1., 1., 1.]])
  """
13. Device and Datatype
 t = torch.tensor([1,2,3], device="cpu", dtype= torch.float16)
 t.device, t.dtype
 """
 (device(type='cpu'), torch.float16)
 """
14. Tensor Arithmetic
  t = torch.arange(start=1, end=10, step=2)
  print(t + 100)
  print(t - 100)
  t_add = t+100
  t = torch.arange(start=1, end=10, step=2)
  print(t_add * t) #Elementwise Multiplication
  """
  tensor([101, 103, 105, 107, 109])
  tensor([-99, -97, -95, -93, -91])
  tensor([101, 309, 525, 749, 981])
  """
